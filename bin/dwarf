#!/usr/bin/python

import logging
import os
import signal
import sys

# Add ../ to the Python search path if ../dwarf/__init__.py exists
possible_topdir = os.path.normpath(os.path.join(os.path.abspath(sys.argv[0]),
                                                os.pardir, os.pardir))
if os.path.exists(os.path.join(possible_topdir, 'dwarf', '__init__.py')):
    sys.path.insert(0, possible_topdir)

from dwarf.api import auth
from dwarf.api import compute
from dwarf.api import database
from dwarf.api import images

from dwarf.common import config

from dwarf.compute import ec2metadata

CONF = config.CONFIG

THREADS = []


def cleanup(dummy_signal, dummy_frame):
    for thread in THREADS:
        thread.stop()


if __name__ == '__main__':
    global THREADS   # pylint: disable=W0603

    # Set up the logger
    _filename = CONF.dwarf_log
    _format = '%(asctime)s - %(levelname)s - %(name)s : %(message)s'
    logging.basicConfig(filename=_filename, format=_format,
                        level=logging.DEBUG)

    # Dump the config options
    CONF.dump_options()

    # Create the API (and Ec2 metadata) server threads
    THREADS = [
        auth.AuthApiThread(),
        compute.ComputeApiThread(),
        database.DatabaseApiThread(),
        images.ImagesApiThread(),
        ec2metadata.Ec2MetadataThread(),
    ]

    # Install the exit handler
    signal.signal(signal.SIGINT, signal.SIG_IGN)
    signal.signal(signal.SIGTERM, cleanup)

    # Start all threads
    for thread in THREADS:
        thread.daemon = True
        thread.start()

    # Wait for all threads to terminate
    for thread in THREADS:
        while thread.is_alive():
            thread.join(3600)
