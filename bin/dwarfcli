#!/usr/bin/env python

from __future__ import print_function

import argparse
import os
import sys

# Add ../ to the Python search path if ../dwarfclient/__init__.py exists
possible_topdir = os.path.normpath(os.path.join(os.path.abspath(sys.argv[0]),
                                                os.pardir, os.pardir))
if os.path.exists(os.path.join(possible_topdir, 'dwarfclient', '__init__.py')):
    sys.path.insert(0, possible_topdir)

from dwarfclient import client
from dwarfclient import exception

from dwarfclient.common import log
from dwarfclient.common import utils


@utils.add_help('initialize the environment')
def do_env_init(args):
    gc = client.Client(args)
    gc.init()


@utils.add_help('purge the environment')
def do_env_purge(args):
    gc = client.Client(args)
    gc.purge()


@utils.add_help('list servers')
def do_list(args):
    gc = client.Client(args)
    servers = gc.servers.list()
    utils.print_list(servers, ['ID', 'Name', 'Domain', 'IP Address'])


@utils.add_arg('server', type=int, help='server ID')
@utils.add_help('show server details')
def do_show(args):
    gc = client.Client(args)
    server = gc.servers.show(args.server)
    utils.print_details(server)


@utils.add_arg('name', help='server name')
@utils.add_arg('--image-file', help='image filename')
@utils.add_help('boot a server')
def do_boot(args):
    gc = client.Client(args)
    server = gc.servers.boot(args.name, args.image_file)
    utils.print_details(server)


@utils.add_arg('server', type=int, help='server ID')
@utils.add_help('delete a server')
def do_delete(args):
    gc = client.Client(args)
    gc.servers.delete(args.server)


@utils.add_arg('server', type=int, help='server ID')
@utils.add_help('get the console log of a server')
def do_console_log(args):
    gc = client.Client(args)
    print(gc.servers.console_log(args.server))


@utils.add_arg('server', type=int, help='server ID')
@utils.add_help('get a VNC console to the server')
def do_get_vnc_console(args):
    gc = client.Client(args)
    print(gc.servers.get_vnc_console(args.server))


@utils.add_help('initialize the database')
def do_db_init(args):
    gc = client.Client(args)
    gc.db.init()


@utils.add_help('delete the database')
def do_db_delete(args):
    gc = client.Client(args)
    gc.db.delete()


@utils.add_arg('--table', help='table name')
@utils.add_help('dump the database')
def do_db_dump(args):
    gc = client.Client(args)
    gc.db.dump(args.table)


def add_subcommand_parsers(parser, module):
    """
    Add subparsers for the subcommands
    """
    subparsers = parser.add_subparsers(title='subcommands')

    # Walk through the 'do_' functions
    for attr in (a for a in dir(module) if a.startswith('do_')):
        cmd_name = attr[3:].replace('_', '-')
        cmd_cb = getattr(module, attr)
        cmd_desc = cmd_cb.__doc__ or ''
        cmd_help = getattr(cmd_cb, 'help', [])
        cmd_args = getattr(cmd_cb, 'arg', [])

        parser = subparsers.add_parser(cmd_name, help=cmd_help[0][0][0],
                                       description=cmd_desc, add_help=False)
        parser.add_argument('-h', '--help', action='help')
        for (args, kwargs) in cmd_args:
            parser.add_argument(*args, **kwargs)
        parser.set_defaults(func=cmd_cb)


def main():

    # Create the parser, add the top-level arguments and add the subparsers for
    # the subcommands
    aparser = argparse.ArgumentParser()
    aparser.add_argument('-v', '--verbose', action='store_true', default=False,
                         help='increase verbosity')
    add_subcommand_parsers(aparser, sys.modules[__name__])

    # Parse the arguments and call the subcommand
    aargs = aparser.parse_args()
    log.init(aargs)
    try:
        aargs.func(aargs)
    except exception.DwarfException as e:
        print("Error: %s" % str(e))


if __name__ == '__main__':
    main()
